<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-64) 2016.2 (Build 736U)" ts="2022-11-23 10:01:50">
<Class name="Util.DateUtils">
<Super>%RegisteredObject</Super>
<TimeChanged>66434,53313.147962</TimeChanged>
<TimeCreated>65702,71123.786395</TimeCreated>
<NoExtent>1</NoExtent>

<Method name="GetCurrentAge">
<Description>
desc：根据当前日期取年龄
w ##class(Util.DateUtils).GetCurrentAge("54627")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>date:%Date=""</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	s age = $s(date = "" : "", 1 : ($zd($h, 8) - $ZD(date, 8) \ 10000))
	q age
]]></Implementation>
</Method>

<Method name="GetMonthsAge">
<Description>
desc：获取年龄日期到当前的月数
w ##class(Util.DateUtils).GetMonthsAge("1990-04-25")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>from:%Date,to={$zd(+$h, 3)}</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	s fromDay = $zdh(from, 3)
	s toDay  = $zdh(to, 3)
	s num = $SYSTEM.SQL.DATEDIFF("mm", fromDay, toDay)
	q num
]]></Implementation>
</Method>

<Method name="GetDaysAge">
<Description>
desc：获取年龄日期到当前的天数
w ##class(Util.DateUtils).GetDaysAge("1990-04-25")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>from:%Date,to={$zd(+$h, 3)}</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	s fromDay = $zdh(from, 3)
	s toDay  = $zdh(to, 3)
	
	s num = $SYSTEM.SQL.DATEDIFF("dd", fromDay, toDay)
	q num
]]></Implementation>
</Method>

<Method name="GetDiffSecond">
<Description>
desc：计算日期相差秒数
w ##class(Util.DateUtils).GetDiffSecond("1990-04-25 21:00:00","1990-04-25 21:00:10")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>date1:%DateTime,date2:%DateTime</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	
	s num = $SYSTEM.SQL.DATEDIFF("second", date1, date2)
	q num
]]></Implementation>
</Method>

<Method name="GetDiffMinute">
<Description>
desc：计算日期相差分数
w ##class(Util.DateUtils).GetDiffMinute("1990-04-25 21:00:10","1990-04-26 21:00:20")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>date1:%DateTime,date2:%DateTime</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	
	s num = $SYSTEM.SQL.DATEDIFF("mi", date1, date2)
	q num
]]></Implementation>
</Method>

<Method name="GetLastDay">
<Description>
desc：计算输入日期的最后一天
w ##class(Util.DateUtils).GetLastDay("2021-06-01")
w ##class(Util.DateUtils).GetLastDay("2021-07-01")
w ##class(Util.DateUtils).GetLastDay("2021-08-01")
w ##class(Util.DateUtils).GetLastDay($h)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>date:%Date</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	s date = $SYSTEM.SQL.LASTDAY(date)
	q $zd(date, 3)
]]></Implementation>
</Method>

<Method name="Timestamp2DateTime">
<Description>
desc：时间戳转日期 默认精确到毫秒 - 第二个参数传入 0 精确到秒
w ##class(Util.DateUtils).Timestamp2DateTime(327686400000)
w ##class(Util.DateUtils).Timestamp2DateTime(1668340100, 0)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>timestamp,ms:%Boolean=1</FormalSpec>
<Implementation><![CDATA[
	s timestamp = $g(timestamp)
	q:timestamp="" ""
	i ms s timestamp = timestamp \ 1000
	s datetime = timestamp + 4070937600
	s time = datetime # 86400
	s date = (datetime - time) / 86400
	s date = $zd(date, 3)
	s time = $zt(time, 1)
	s toDateTime = date _ " " _ time
	q toDateTime
]]></Implementation>
</Method>

<Method name="DateTime2Timestamp">
<Description>
desc：当前日期转时间戳 默认精确到毫秒 - 参数 0 精确到秒
w ##class(Util.DateUtils).DateTime2Timestamp(0)
w ##class(Util.DateUtils).DateTime2Timestamp()</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>ms:%Boolean=1</FormalSpec>
<Implementation><![CDATA[
	if (ms) {
		s timestamp = (+$h - 47117) * 3600 * 24 * 1000 
		s nowtimestamp = $p($zts, ",", 2) * 1000
		s timestamp = timestamp + nowtimestamp
	} else {
		s timestamp = (+$h - 47117) * 3600 * 24 
		s nowtimestamp = $p($p($zts, ",", 2), ".")
		s timestamp = timestamp + nowtimestamp
	}
	q timestamp
]]></Implementation>
</Method>

<Method name="GetLastMonthDuring">
<Description>
desc：获取上个月一号到上个月最后一天
w ##class(Util.DateUtils).GetLastMonthDuring()</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	s currentDate = $zd(+$h, 3)
	s currentYear = $p(currentDate, "-", 1)
	s currentMonth = $p(currentDate, "-", 2)
	s currentDate = $p(currentDate,"-", 3)
	s:(currentMonth = 1) year = currentYear - 1,month = 12
	s:(currentMonth '= 1) year = currentYear, month = currentMonth - 1
	s:($l(month) = 1) month = "0" _ month
	s startDate = year _ "-" _ month _ "-" _ "01"
	s:($l(currentMonth) = 1) month = "0" _ currentMonth
	s mDate = currentYear _ "-" _ currentMonth _ "-"_"01"
	s m = $zdh(mDate, 3)
	s endDate = $zd(m - 1, 3)
	q $lb(startDate, endDate)
]]></Implementation>
</Method>

<Method name="GetLastMonthToday">
<Description>
desc：获取上个月的今天
w ##class(Util.DateUtils).GetLastMonthToday()</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	q $SYSTEM.SQL.DATEADD("mm", -1, +$h)
]]></Implementation>
</Method>

<Method name="GetMonthDay">
<Description>
desc：获取今天是月中第几天
w ##class(Util.DateUtils).GetMonthDay()</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	q $SYSTEM.SQL.DAYOFMONTH(+$H)
]]></Implementation>
</Method>

<Method name="GetAddHour">
<Description>
当前时间加上N个小时
w ##class(Util.DateUtils).GetAddHour(1)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>hour</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	q $SYSTEM.SQL.DATEADD("hh", hour, $h)
]]></Implementation>
</Method>

<Method name="GetWeekOfYear">
<Description>
desc：获取一年中第几个星期
w ##class(Util.DateUtils).GetWeekOfYear(+$h)
w ##class(Util.DateUtils).GetWeekOfYear("2020-01-01")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>date</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	q $SYSTEM.SQL.WEEK(date)
]]></Implementation>
</Method>

<Method name="ForMonth">
<Description>
desc：遍历两个日期中间的月份
w ##Class(Util.DateUtils).ForMonth("2021-07","2022-07")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>startMonth,endMonth</FormalSpec>
<Implementation><![CDATA[
	s startMonth = +startMonth * 12 + (+$p(startMonth, "-", 2)) 
	s endMonth = +endMonth * 12 + (+$p(endMonth, "-", 2)) 
	for i = startMonth : 1 : endMonth {
		s year = i \ 12
		s month  = i # 12 + 1
		w year _ "-" _ month,!
	}
	q ""
]]></Implementation>
</Method>

<Method name="FormatDate">
<Description>
desc：格式化日期
w ##Class(Util.DateUtils).FormatDate("20/04/2022", "DD/MM/YYYY", "YYYY/MM/DD")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>date,toFormat,fromFormt</FormalSpec>
<Implementation><![CDATA[
	s fDate = $system.SQL.TODATE(date, toFormat)
	s tDate = $system.SQL.TOCHAR(fDate, fromFormt)
	q tDate
]]></Implementation>
</Method>

<Method name="IsValidDate">
<Description>
desc：验证日期是否合法
w ##Class(Util.DateUtils).IsValidDate("20/04/2022")
w ##Class(Util.DateUtils).IsValidDate("2022-04-25")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>date,toFormat,fromFormt</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	s sc = ##class(%Library.TimeStamp).IsValid(date)
	q:($$$ISERR(sc)) $$$NO
	q $$$YES
]]></Implementation>
</Method>

<Method name="GetMonthPeriods">
<Description>
desc：根据年份获取每一个月的开始和结束日期的函数
w ##Class(Util.DateUtils).GetMonthPeriods("2022",2022)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>initialYear:%Integer,endYear:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    s sc = $$$OK
    s result = []
    for currentYear = initialYear : 1 : endYear {
        for currentMonth = 1 : 1 : 12 {
            set item = {}
            if currentMonth < 10 {
                s currentMonthStr = "0" _ currentMonth
            } else {
                s currentMonthStr = "" _ currentMonth
            }
            s item.startDate = currentYear _ "-" _ currentMonthStr _ "-01T00:00:00"
            s nextMonth = currentMonth + 1
            if nextMonth = 13 {
                s item.endDate = currentYear _ "-12-31T23:59:59"
            } else {
                s nextDate = $system.SQL.TODATE(currentYear _ "-" _ nextMonth _ "-01", "YYY-MM-DD")
                s nextDate = $i(nextDate, -1)
                s item.endDate = $zd(nextDate, 3) _ "T23:59:59"
            }
            
            d result.%Push(item)
        }
    }
    w result.%ToJSON()

    ret sc
]]></Implementation>
</Method>

<Method name="testJson">
<Description>
w ##Class(Util.DateUtils).testJson()</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#Dim objectA As %ZEN.proxyObject
	Set objectA=##class(%ZEN.proxyObject).%New()
	
	Set objetoB=##class(%ZEN.proxyObject).%New()
	Set objetoB.phone2=961365378
	Set objetoB.name="Dani"
	Set objectA.objetoB=objetoB
	Set objectA.phone=964121214
	u 0 w "NORMAL",!
	
	Do objectA.%ToJSON()
	
	U 0 W "",!,!
	
	u 0 w "WITH PARAMETER",!
	Do objectA.%ToJSON(,"aelotwux")
	
	U 0 W "",!,!
	
	u 0 w "WITH PARAMETRO AND EXCLUDED",!
	Do objectA.excludeStringformat.Insert("phone")
	Do objectA.%ToJSON(,"aelotwux")
	
	U 0 W "",!,!
	
	u 0 w "WITH FORCED LIST",!
	Do objectA.forceStringFormat.Insert("phone")
	Do objectA.%ToJSON()
]]></Implementation>
</Method>
</Class>
</Export>
