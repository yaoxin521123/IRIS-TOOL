<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-64) 2016.2 (Build 736U)" ts="2022-11-23 10:03:27">
<Class name="Util.StringUtils">
<Super>%RegisteredObject</Super>
<TimeChanged>66426,71948.896179</TimeChanged>
<TimeCreated>65700,71065.598445</TimeCreated>

<Method name="GetStringMaxLength">
<Description>
desc：获取当前系统字符串最大长度
output：字符串最大长度
w ##class(Util.StringUtils).GetStringMaxLength()</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[	q $system.SYS.MaxLocalLength()
]]></Implementation>
</Method>

<Method name="IsChinese">
<Description>
desc：判断字符串是否全是中文，字符串中有一个非中文即返回$$$NO
w ##class(Util.StringUtils).IsChinese("姚鑫")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>str:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	if 1 = $match(str,"(?x)[\u4e00-\u9fa5]*#中文正则表达式") {
		q $$$YES
	} else {
		q $$$NO
	}
]]></Implementation>
</Method>

<Method name="IsChineseChar">
<Description>
desc：判断字符串是否全是中文，字符串中有一个非中文即返回$$$NO
w ##class(Util.StringUtils).IsChineseChar("姚")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>str:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	s asc = $a(str)
	if (asc < $zhex("9fa5"))&&(asc > $zhex("4e00")){
		q $$$YES
	} else {
		q $$$NO
	}
]]></Implementation>
</Method>

<Method name="Trim">
<Description>
desc：去除字符串首w尾空格，中间保留
w ##class(Util.StringUtils).Trim("    姚    鑫    ")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>str:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[   q $e(str, $locate(str, "[^\s]"), $locate(str, "\s*$") - 1)
]]></Implementation>
</Method>

<Method name="Trim1">
<Description>
desc：去除字符串首位空格，中间保留
w ##class(Util.StringUtils).Trim1("    姚    鑫    ")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>str:%String</FormalSpec>
<Language>basic</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	return Trim(str)
]]></Implementation>
</Method>

<Method name="Trim2">
<Description>
desc：去除字符串首位空格，中间保留
w ##class(Util.StringUtils).Trim2("    姚    鑫    ")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>str:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	q $zstrip(str, "<>", " ")
]]></Implementation>
</Method>

<Method name="Trim3">
<Description>
desc：去除字符串首位空格，中间保留
w ##class(Util.StringUtils).Trim3("    姚    鑫    ")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>str:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	s target = ""
	&sql(
		select TRIM(both ' ' from :str) into :target
	)
	q target
]]></Implementation>
</Method>

<Method name="DeleteSpace">
<Description>
desc：删除字符串中空格，数组方式
w ##class(Util.StringUtils).DeleteSpace("    姚    鑫    ")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>str:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
  	s str = $lts($lfs(str," "),"")
	q str
]]></Implementation>
</Method>

<Method name="Repeat">
<Description>
desc：高效重复字符串
w ##class(Util.StringUtils).Repeat("yx",5)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>target:%String,num:%Integer</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	s str = ""
  	s $p(str, target, num) = target
  	q str
]]></Implementation>
</Method>

<Method name="IsContain">
<Description>
desc：查找字符串中是否包含某个目标字符串
input: 字符串，目标字符串，分隔符
w ##class(Util.StringUtils).IsContain("1,11,222,333","1",",")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>str:%String,target:%String,del:%String="^"</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	s len = $l(str, del)
	s ret = $$$NO
	for i = 1 : 1 : len {
		q:ret
		s sub = $p(str, del, i)
		s:(sub = target) ret = $$$YES
	}
	q ret
]]></Implementation>
</Method>

<Method name="IsContain1">
<Description>
desc：查找字符串中是否包含某个目标字符串
w ##class(Util.StringUtils).IsContain("1,11,222,333","1",",")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>str:%String,target:%String,del:%String="^"</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	s lb = $lfs(str, del)
	q:($lf(lb, target)) $$$YES
	q $$$NO
]]></Implementation>
</Method>

<Method name="PrefixMatch">
<Description>
desc：匹配字符串前缀
w ##class(Util.StringUtils).PrefixMatch("1123*456xzc","123*")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>str:%String,target:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	if ($locate(str, "^"_target) > 0){
		q $$$YES
	}
	q $$$NO
]]></Implementation>
</Method>

<Method name="SuffixMatch">
<Description>
desc：匹配字符串后缀
w ##class(Util.StringUtils).SuffixMatch("1123*456xzc","zxc")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>str:%String,target:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	if ($locate(str, target_"$") > 0){
		q $$$YES
	}
	q $$$NO
]]></Implementation>
</Method>

<Method name="GetTypeOf">
<Description>
desc：判断字符串变量类型
w ##class(Util.StringUtils).GetTypeOf(##class(PHA.HERB.MOB.Rule).%New())
w ##class(Util.StringUtils).GetTypeOf([])
w ##class(Util.StringUtils).GetTypeOf({})
w ##class(Util.StringUtils).GetTypeOf("0")
w ##class(Util.StringUtils).GetTypeOf("1")
w ##class(Util.StringUtils).GetTypeOf(.12)
w ##class(Util.StringUtils).GetTypeOf(".12")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>str</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	q [(str)].%GetTypeOf(0)
]]></Implementation>
</Method>

<Method name="IsIdentityCard">
<Description>
desc：验证身份证
w ##class(Util.StringUtils).IsIdentityCard("22240319900425111X")
w ##class(Util.StringUtils).IsIdentityCard("11111119111111111X")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>str:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	if 1 = $match(str,"(?x)^[1-9]\d{5}(18|19|([23]\d))\d{2}((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\d{3}[0-9Xx]$*#18位身份证正则表达式") {
		q $$$YES
	} else {
		q $$$NO
	}
]]></Implementation>
</Method>

<Method name="RemoveLetter">
<Description>
desc：只保留汉字
w ##class(Util.StringUtils).RemoveLetter("hello world 欢迎世界")
w ##class(Util.StringUtils).RemoveLetter("2李4lll")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>str:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	s str = $zstrip(str, "*ANP")
	q str
]]></Implementation>
</Method>

<Method name="GetStringOfNumber">
<Description>
desc：获取字符串中的数字
w ##class(Util.StringUtils).GetStringOfNumber("AS1DAS姚鑫1234511A2S")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>str:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	s str = $zstrip(str, "*E'N")
	q str
]]></Implementation>
</Method>

<Method name="UnicodeToString">
<Description>
desc：根据十六进制转汉子
w ##class(Util.StringUtils).UnicodeToString("59da")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>unicode:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	s ascii = $zhex(unicode)
	q $c(ascii)
]]></Implementation>
</Method>

<Method name="Chinese2Spell">
<Description>
desc：汉字转换拼音
w ##class(Util.StringUtils).Chinese2Spell("姚鑫")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>str:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	s spellStr= ""
	s len = $l(str)
	for i = 1 : 1 : len {
		s char = $e(str, i)
		s spell = $g(^pinyin(char))
		s spellStr = spellStr _ spell
	}
	q spellStr
]]></Implementation>
</Method>

<Method name="IsPrefixNum">
<Description>
desc：判断字符串开头是否为数字
w ##class(Util.StringUtils).IsPrefixNum("1yx")
w ##class(Util.StringUtils).IsPrefixNum("yx")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>str:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	q $isvalidnum($e(str))
]]></Implementation>
</Method>

<Method name="GetStrPostZero">
<Description>
desc：判断字符串开头是否为数字
w ##class(Util.StringUtils).GetStrPostZero("360003000")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>str:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	s list = $lfs(str,"0")
	zw list
	s position = $lf(list, "", $ll(list)-2)
	b
	w position,!
]]></Implementation>
</Method>

<Method name="Angle2HalfAngle">
<Description>
desc：全角转半角
w ##class(Util.StringUtils).Angle2HalfAngle("！")
w ##class(Util.StringUtils).Angle2HalfAngle("，")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>str</FormalSpec>
<Implementation><![CDATA[
	s ascii  = $ascii(str)
	s hex = $zhex(ascii)
	s halfHex = "00" _ ($e(hex, 3) + 2) _ $e(hex, 4)
	s halfAscii = $zhex(halfHex)
	q $char(halfAscii)
]]></Implementation>
</Method>

<Method name="GetStringByte">
<Description>
desc: 判断字符串的长度. 汉字,全角字符,全角字母为2个长度, 字母为1个长度
w ##class(Util.StringUtils).GetStringByte("姚鑫1A“”'")
w ##class(Util.StringUtils).GetStringByte(".。")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>str</FormalSpec>
<Implementation><![CDATA[
	s len = 0
	for i = 1 : 1 : $l(str) {
		s word = $e(str, i)
		if ($ziswide(word)) {
			s len = len + 2
		} else {
			s len = len + 1
		}
	}
	q len
]]></Implementation>
</Method>

<Method name="IsFullAngle">
<Description>
desc: 汉字,全角字符,全角字母返回 1, 其它返回0
w ##class(Util.StringUtils).IsFullAngle("A")
w ##class(Util.StringUtils).IsFullAngle("Ａ")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>word</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	/* 汉字范围 */
	q:(($a(word) >= 19968) && ($a(word) <= 40869)) $$$OK	
	q:("ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵＶＷＸＹＺａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖｗｘｙｚ１２３４５６７８９０｀！＠＃＄％＾＆＊（）＿＋｜＼｛｝［］＂＇。《》／？：；￥｛｝，！、" [ word) $$$OK
	q $$$NO
]]></Implementation>
</Method>

<Method name="GetStringSplit">
<Description>
desc: 按字节截取字符串
w ##class(Util.StringUtils).GetStringSplit("全角字母为2个长度",2)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>str,num</FormalSpec>
<Implementation><![CDATA[
	s len = "0", j = ""
	for i = 1 : 1 : $l(str) {
		s word = $e(str, i)
		if ($ziswide(word)) {
			s len = len + 2
		} else {
			s len = len + 1
		}
		i (len = num)||(len - num = 1)  s j = i
		q:(j '= "")
	}
	q:(j = "") str
	s target = $e(str, 1, j)	
	q target
]]></Implementation>
</Method>

<Method name="ReplaceStr">
<Description>
desc: 目标字符串替换为指定字符，其他替换为空。
例如 4替换a 其他替换为空
w ##class(Util.StringUtils).ReplaceStr("1^2^3^4^5", "^", 4, "a")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>source,del,target,str</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	s list = $lfs(source, "^")
	s pos = $lf(list, target)
	s num = $ll(list)
	s newStr = ""
	s $p(newStr, del, num) = ""
	s array = $lfs(newStr, "^") 
	s $li(array, pos) = str
	s array = $lts(array, del)
	q array
]]></Implementation>
</Method>

<Method name="FindRepeat">
<Description>
desc: 查重
d ##class(Util.StringUtils).FindRepeat("abcdea1b2c3d4e5")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>str</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	s len = $l(str)
	for i = 1 : 1 : len {
		s array($i(array($e(str,i)))) = $e(str, i)
	}
	zw array
]]></Implementation>
</Method>

<Method name="Camel2Underline">
<Description>
desc: 驼峰转下划线
w ##class(Util.StringUtils).Camel2Underline("Red1YellowGreen23BlackWhite")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>str</FormalSpec>
<Implementation><![CDATA[
	s old = str
	s pos = 1
	s count = 0
	while $locate(str,"\w{1}[A-Z]{1}",pos, pos, val) {
		s old = $e(old, 1, pos - 2 + count) _ "_" _   $e(old, pos - 1 + count, *)
		s count = $i(count)
	}
	q old
]]></Implementation>
</Method>

<Method name="lb2String">
<Description>
desc: 内部数组转字符串
w ##class(Util.StringUtils).lb2String($lb(1,2,3,,"","yx"))</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>lb</FormalSpec>
<Implementation><![CDATA[	q $$Format^%qcr(lb, 1)
]]></Implementation>
</Method>
</Class>
</Export>
